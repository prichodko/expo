{"version":3,"file":"UseUpdates.js","sourceRoot":"","sources":["../src/UseUpdates.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport * as Updates from './Updates';\nimport { useUpdateEvents } from './UpdatesHooks';\nimport type {\n  UpdatesInfo,\n  UseUpdatesCallbacksType,\n  UseUpdatesReturnType,\n} from './UseUpdates.types';\nimport { currentlyRunning } from './UseUpdatesConstants';\nimport {\n  checkForUpdateAndReturnAvailableAsync,\n  downloadUpdateAsync,\n  downloadAndRunUpdateAsync,\n  runUpdateAsync,\n  updatesInfoFromEvent,\n} from './UseUpdatesUtils';\n\n/**\n * Hook that obtains the Updates info structure and functions.\n *\n * @param callbacks Optional set of callbacks that will be called when `checkForUpdate()`, `downloadUpdate()`, `downloadAndRunUpdate()`, or `runUpdate()`, start, complete, or have errors.\n *\n * @return the [`UpdatesInfo`](#updatesinfo) structure and associated methods. When using this hook, the methods returned should be used instead of [`checkForUpdateAsync`](#updatescheckforupdateasync), [`fetchUpdateAsync`](#updatesfetchupdateasync), [`readLogEntriesAsync`](#updatesreadlogentriesasync), and [`reloadAsync`](#updatesreloadasync).\n *\n * @example\n * ```jsx UpdatesDemo.tsx\n * import { StatusBar } from 'expo-status-bar';\n * import React from 'react';\n * import { Pressable, Text, View } from 'react-native';\n * import * as Updates from 'expo-updates';\n *\n * export default function UpdatesDemo() {\n *   const { updatesInfo, checkForUpdate, downloadAndRunUpdate } = Updates.useUpdates();\n *\n *   const { currentlyRunning, availableUpdate } = updatesInfo;\n *\n *   // If true, we show the button to download and run the update\n *   const showDownloadButton = availableUpdate !== undefined;\n *\n *   // Show whether or not we are running embedded code or an update\n *   const runTypeMessage = updatesInfo.currentlyRunning.isEmbeddedLaunch\n *     ? 'This app is running from built-in code'\n *     : 'This app is running an update';\n *\n *   return (\n *     <View style={styles.container}>\n *       <Text style={styles.headerText}>Updates Demo</Text>\n *       <Text>{runTypeMessage}</Text>\n *       <Button pressHandler={checkForUpdate} text=\"Check manually for updates\" />\n *       {showDownloadButton ? (\n *         <Button pressHandler={downloadAndRunUpdate} text=\"Download and run update\" />\n *       ) : null}\n *       <StatusBar style=\"auto\" />\n *     </View>\n *   );\n * }\n *\n */\nconst useUpdates: (callbacks?: UseUpdatesCallbacksType) => UseUpdatesReturnType = (callbacks) => {\n  // Get updates info value and setter from provider\n  const [updatesInfo, setUpdatesInfo] = useState({\n    currentlyRunning,\n  });\n\n  const callbacksRef = useRef<UseUpdatesCallbacksType | undefined>();\n\n  useEffect(() => {\n    callbacksRef.current = callbacks;\n  }, [callbacks]);\n\n  // Set up listener for events from automatic update requests\n  // that happen on startup, and use events to refresh the updates info\n  // context\n  useUpdateEvents((event) => {\n    setUpdatesInfo((updatesInfo: UpdatesInfo) => updatesInfoFromEvent(updatesInfo, event));\n  });\n\n  const checkForUpdate = () => {\n    checkForUpdateAndReturnAvailableAsync(callbacksRef.current)\n      .then((availableUpdate) =>\n        setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n          ...updatesInfo,\n          lastCheckForUpdateTimeSinceRestart: new Date(),\n          availableUpdate,\n        }))\n      )\n      .catch((error) =>\n        setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n          ...updatesInfo,\n          lastCheckForUpdateTimeSinceRestart: new Date(),\n          error,\n        }))\n      );\n  };\n  const downloadAndRunUpdate = () => {\n    downloadAndRunUpdateAsync(callbacksRef.current).catch((error) => {\n      setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n        ...updatesInfo,\n        error,\n      }));\n    });\n  };\n  const downloadUpdate = () => {\n    downloadUpdateAsync(callbacksRef.current).catch((error) => {\n      setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n        ...updatesInfo,\n        error,\n      }));\n    });\n  };\n  const runUpdate = () => {\n    runUpdateAsync(callbacksRef.current).catch((error) => {\n      setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n        ...updatesInfo,\n        error,\n      }));\n    });\n  };\n  const readLogEntries = (maxAge: number = 3600000) => {\n    Updates.readLogEntriesAsync(maxAge)\n      .then((logEntries) =>\n        setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n          ...updatesInfo,\n          logEntries,\n        }))\n      )\n      .catch((error) => setUpdatesInfo((updatesInfo: UpdatesInfo) => ({ ...updatesInfo, error })));\n  };\n  // Return the updates info and the user facing functions\n  return {\n    updatesInfo,\n    checkForUpdate,\n    downloadAndRunUpdate,\n    downloadUpdate,\n    runUpdate,\n    readLogEntries,\n  };\n};\n\nexport { useUpdates };\n"]}