{"version":3,"file":"UpdatesProvider.js","sourceRoot":"","sources":["../src/UpdatesProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nimport * as Updates from './Updates';\nimport { useUpdateEvents } from './UpdatesHooks';\nimport { currentlyRunning } from './UpdatesProvider.constants';\nimport type { UpdatesInfo, UpdatesProviderEvent } from './UpdatesProvider.types';\nimport {\n  checkForUpdateAndReturnAvailableAsync,\n  downloadUpdateAsync,\n  downloadAndRunUpdateAsync,\n  runUpdateAsync,\n  updatesInfoFromEvent,\n} from './UpdatesProvider.utils';\n\n// Context that includes getter and setter for the updates info\ntype UpdatesContextType = {\n  updatesInfo: UpdatesInfo;\n  setUpdatesInfo: (updates: UpdatesInfo) => void;\n};\n\n// The context provided to the app\nconst UpdatesContext: React.Context<UpdatesContextType> = createContext({\n  updatesInfo: {\n    currentlyRunning,\n  },\n  setUpdatesInfo: (_) => {},\n});\n\n///////////// Exported functions /////////////\n\n/**\n * Downloads and runs an update, if one is available.\n * Provided to application code from the [`useUpdates`](#useupdatesprovidereventhandler) hook.\n */\nconst downloadAndRunUpdate = () => {\n  throw new Error(\n    'This error occurs when an application directly imports this method from the module. To use this method, it must be provided by the useUpdates() hook.'\n  );\n};\n\n/**\n * Downloads an update, if one is available, using `Updates.fetchUpdateAsync()`.\n * Provided to application code from the [`useUpdates`](#useupdatesprovidereventhandler) hook.\n */\nconst downloadUpdate = () => {\n  throw new Error(\n    'This error occurs when an application directly imports this method from the module. To use this method, it must be provided by the useUpdates() hook.'\n  );\n};\n\n/**\n * Runs an update by calling `Updates.reloadAsync()`. This should not be called unless there is an available update\n * that has already been successfully downloaded using [`downloadUpdate()`](#downloadupdate).\n * Provided to application code from the [`useUpdates`](#useupdatesprovidereventhandler) hook.\n */\nconst runUpdate = () => {\n  throw new Error(\n    'This error occurs when an application directly imports this method from the module. To use this method, it must be provided by the useUpdates() hook.'\n  );\n};\n\n/**\n * Calls `Updates.checkForUpdateAsync()` and uses the passed in setter\n * to refresh the [`UpdatesInfo`](#updatesinfo).\n * Provided to application code from the [`useUpdates`](#useupdatesprovidereventhandler) hook.\n */\nconst checkForUpdate = () => {\n  throw new Error(\n    'This error occurs when an application directly imports this method from the module. To use this method, it must be provided by the useUpdates() hook.'\n  );\n};\n\n/**\n * Calls `Updates.readLogEntriesAsync()` and sets the `logEntries` property in the [`UpdatesInfo`](#updatesinfo) structure to the results.\n * Provided to application code from the [`useUpdates`](#useupdatesprovidereventhandler) hook.\n *\n * @param maxAge Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour).\n */\nconst readLogEntries = (maxAge?: number) => {\n  throw new Error(\n    'This error occurs when an application directly imports this method from the module. To use this method, it must be provided by the useUpdates() hook.'\n  );\n};\n\n/////// Provider and hook ///////////\n\n/**\n * Provides the Updates React context. Includes an [`UpdateEvent`](#updateevent) listener\n * that will set the context automatically, if automatic updates are enabled and a new\n * update is available. This is required if application code uses the [`useUpdates`](#useupdatesprovidereventhandler) hook.\n * @param props Context will be provided to `props.children`\n * @returns the provider.\n * @example\n * ```jsx App.tsx\n * import * as Updates from 'expo-updates';\n *\n * const { UpdatesProvider } = Updates.Provider;\n *\n * import UpdatesDemo from './src/UpdatesDemo';\n *\n * export default function App() {\n *   return (\n *     <UpdatesProvider>\n *       <UpdatesDemo />\n *     </UpdatesProvider>\n *   );\n * }\n * ```\n */\nconst UpdatesProvider = (props: { children: any }) => {\n  const [updatesInfo, setUpdatesInfo] = useState({\n    currentlyRunning,\n  });\n  // Set up listener for events from automatic update requests\n  // that happen on startup, and use events to refresh the updates info\n  // context\n  useUpdateEvents((event) => {\n    setUpdatesInfo(updatesInfoFromEvent(event));\n  });\n  return (\n    <UpdatesContext.Provider value={{ updatesInfo, setUpdatesInfo }}>\n      {props.children}\n    </UpdatesContext.Provider>\n  );\n};\n\n/**\n * Hook that obtains the Updates info structure and functions.\n * Requires that application code be inside an [`UpdatesProvider`](#updatesproviderprops).\n * @param providerEventHandler Optional handler. If present, the handler will be called on\n * start, completion, and error in checkForUpdate, downloadUpdate, and downloadAndRunUpdate methods.\n * download starts, and again when download completes (successfully or not).\n * @returns the [`UpdatesInfo`](#updatesinfo) structure and associated methods. When using the provider,\n * the methods returned by this hook should be used instead of [`checkForUpdateAsync`](#updatescheckforupdateasync),\n * [`fetchUpdateAsync`](#updatesfetchupdateasync), [`readLogEntriesAsync`](#updatesreadlogentriesasync),\n * and [`reloadAsync`](#updatesreloadasync).\n * @example\n * ```jsx UpdatesDemo.tsx\n * import { StatusBar } from 'expo-status-bar';\n * import React from 'react';\n * import { Pressable, Text, View } from 'react-native';\n * import * as Updates from 'expo-updates';\n *\n * const { useUpdates } = Updates.Provider;\n *\n * export default function UpdatesDemo() {\n *   const { updatesInfo, checkForUpdate, downloadAndRunUpdate } = useUpdates();\n *\n *   const { currentlyRunning, availableUpdate } = updatesInfo;\n *\n *   // If true, we show the button to download and run the update\n *   const showDownloadButton = availableUpdate !== undefined;\n *\n *   // Show whether or not we are running embedded code or an update\n *   const runTypeMessage = updatesInfo.currentlyRunning.isEmbeddedLaunch\n *     ? 'This app is running from built-in code'\n *     : 'This app is running an update';\n *\n *   return (\n *     <View style={styles.container}>\n *       <Text style={styles.headerText}>Updates Demo</Text>\n *       <Text>{runTypeMessage}</Text>\n *       <Button pressHandler={checkForUpdate} text=\"Check manually for updates\" />\n *       {showDownloadButton ? (\n *         <Button pressHandler={downloadAndRunUpdate} text=\"Download and run update\" />\n *       ) : null}\n *       <StatusBar style=\"auto\" />\n *     </View>\n *   );\n * }\n */\nconst useUpdates = (providerEventHandler?: (event: UpdatesProviderEvent) => void) => {\n  // Get updates info value and setter from provider\n  const { updatesInfo, setUpdatesInfo } = useContext(UpdatesContext);\n\n  // Return the updates info and the user facing functions\n  return {\n    updatesInfo,\n    checkForUpdate: () => {\n      checkForUpdateAndReturnAvailableAsync(providerEventHandler)\n        .then((availableUpdate) =>\n          setUpdatesInfo({\n            ...updatesInfo,\n            lastCheckForUpdateTime: new Date(),\n            availableUpdate,\n          })\n        )\n        .catch((error) =>\n          setUpdatesInfo({ ...updatesInfo, lastCheckForUpdateTime: new Date(), error })\n        );\n    },\n    downloadAndRunUpdate: () => {\n      downloadAndRunUpdateAsync(providerEventHandler).catch((error) => {\n        setUpdatesInfo({\n          ...updatesInfo,\n          error,\n        });\n      });\n    },\n    downloadUpdate: () => {\n      downloadUpdateAsync(providerEventHandler).catch((error) => {\n        setUpdatesInfo({\n          ...updatesInfo,\n          error,\n        });\n      });\n    },\n    runUpdate: () => {\n      runUpdateAsync(providerEventHandler).catch((error) => {\n        setUpdatesInfo({\n          ...updatesInfo,\n          error,\n        });\n      });\n    },\n    readLogEntries: (maxAge: number = 3600000) => {\n      Updates.readLogEntriesAsync(maxAge)\n        .then((logEntries) =>\n          setUpdatesInfo({\n            ...updatesInfo,\n            logEntries,\n          })\n        )\n        .catch((error) => setUpdatesInfo({ ...updatesInfo, error }));\n    },\n  };\n};\n\nexport {\n  UpdatesProvider,\n  useUpdates,\n  checkForUpdate,\n  downloadUpdate,\n  downloadAndRunUpdate,\n  runUpdate,\n  readLogEntries,\n};\n"]}