{"version":3,"file":"UpdatesProviderUtils.js","sourceRoot":"","sources":["../src/UpdatesProviderUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Updates from './Updates';\nimport type { UpdateEvent } from './Updates.types';\nimport type {\n  AvailableUpdateInfo,\n  UpdatesInfo,\n  UseUpdatesCallbacksType,\n} from './UpdatesProvider.types';\nimport { currentlyRunning } from './UpdatesProviderConstants';\n\n/////// Internal functions ////////\n\n// Constructs the availableUpdate from the update manifest\n// Manifest is of type \"any\" until we no longer support classic updates\nexport const availableUpdateFromManifest = (manifest: any) => {\n  return manifest\n    ? {\n        updateId: manifest?.id ?? null,\n        createdAt: manifest?.createdAt\n          ? new Date(manifest?.createdAt)\n          : manifest?.publishedTime\n          ? new Date(manifest?.publishedTime)\n          : null,\n        manifest,\n      }\n    : undefined;\n};\n\n// Constructs the UpdatesInfo from an event\nexport const updatesInfoFromEvent = (event: UpdateEvent): UpdatesInfo => {\n  const lastCheckForUpdateTime = new Date();\n  if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      lastCheckForUpdateTimeSinceRestart: lastCheckForUpdateTime,\n    };\n  } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      availableUpdate: availableUpdateFromManifest(event.manifest),\n      lastCheckForUpdateTimeSinceRestart: lastCheckForUpdateTime,\n    };\n  } else {\n    // event type === ERROR\n    return {\n      currentlyRunning,\n      error: new Error(event.message),\n      lastCheckForUpdateTimeSinceRestart: lastCheckForUpdateTime,\n    };\n  }\n};\n\n// Implementation of checkForUpdate\nexport const checkForUpdateAndReturnAvailableAsync: (\n  callbacks?: UseUpdatesCallbacksType\n) => Promise<AvailableUpdateInfo | undefined> = async (callbacks) => {\n  try {\n    callbacks?.onCheckForUpdateStart && callbacks?.onCheckForUpdateStart();\n    const checkResult = await Updates.checkForUpdateAsync();\n    callbacks?.onCheckForUpdateComplete && callbacks?.onCheckForUpdateComplete();\n    if (checkResult.isAvailable) {\n      return availableUpdateFromManifest(checkResult.manifest);\n    } else {\n      return undefined;\n    }\n  } catch (error: any) {\n    callbacks?.onCheckForUpdateError && callbacks?.onCheckForUpdateError(error);\n    throw error;\n  }\n};\n\n// Implementation of downloadUpdate\nexport const downloadUpdateAsync = async (callbacks?: UseUpdatesCallbacksType) => {\n  try {\n    callbacks?.onDownloadUpdateStart && callbacks?.onDownloadUpdateStart();\n    await Updates.fetchUpdateAsync();\n    callbacks?.onDownloadUpdateComplete && callbacks?.onDownloadUpdateComplete();\n  } catch (error: any) {\n    callbacks?.onDownloadUpdateError && callbacks?.onDownloadUpdateError(error);\n    throw error;\n  }\n};\n\n// Implementation of runUpdate\nexport const runUpdateAsync = async (callbacks?: UseUpdatesCallbacksType) => {\n  try {\n    callbacks?.onRunUpdateStart && callbacks?.onRunUpdateStart();\n    await Updates.reloadAsync();\n  } catch (error: any) {\n    callbacks?.onRunUpdateError && callbacks?.onRunUpdateError();\n    throw error;\n  }\n};\n\n// Implementation of downloadAndRunUpdate\nexport const downloadAndRunUpdateAsync = async (callbacks?: UseUpdatesCallbacksType) => {\n  await downloadUpdateAsync(callbacks);\n  await runUpdateAsync(callbacks);\n};\n"]}